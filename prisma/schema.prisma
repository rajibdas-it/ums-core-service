generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id         String    @id @default(uuid())
  title      String
  year       String
  code       String
  startMonth String
  endMonth   String
  createdAt  DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  students   Student[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  faculties           Faculty[]
  students            Student[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String          @unique
  academicFacultyId String
  createdAt         DateTime        @default(now())
  updateAt          DateTime        @updatedAt
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  faculties         Faculty[]
  students          Student[]

  @@map("academic_departments")
}

model User {
  id        String   @id @default(uuid())
  userId    String?  @unique
  role      String?
  password  String?
  studentId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students  Student  @relation(fields: [studentId], references: [id])

  @@map("users")
}

model Student {
  id                   String             @id @default(uuid())
  studentId            String?            @unique
  firstName            String
  middleName           String
  lastName             String
  email                String
  contactNo            String
  profileImage         String?
  bloodGroup           String
  gender               String
  academicSemesterId   String
  academicFacultyId    String
  academicDepartmentId String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  user                 User?

  @@map("students")
}

model Faculty {
  id                   String             @id @default(uuid())
  firstName            String
  middleName           String?
  lastName             String
  email                String
  contactNo            String
  profileImage         String
  bloodGroup           String
  gender               String
  designation          String
  academicFacultyId    String
  academicDepartmentId String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  facultyId            String             @unique
  academicFaculty      AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFaulty       AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  buildingId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  building   Building @relation(fields: [buildingId], references: [id])

  @@map("rooms")
}
