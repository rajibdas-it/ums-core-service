generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                         String                      @id @default(uuid())
  title                      String
  year                       String
  code                       String
  startMonth                 String
  endMonth                   String
  isCurrent                  Boolean?                    @default(false)
  createdAt                  DateTime                    @default(now())
  updateAt                   DateTime                    @updatedAt
  students                   Student[]
  semesterRegistrations      SemesterRegistration[]
  studentEnrollCourses       StudentEnrollCourse[]
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]
  studentSemesterPayments    StudentSemesterPayment[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  faculties           Faculty[]
  students            Student[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String          @unique
  academicFacultyId String
  createdAt         DateTime        @default(now())
  updateAt          DateTime        @updatedAt
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  faculties         Faculty[]
  students          Student[]
  offeredCourses    OfferedCourse[]

  @@map("academic_departments")
}

model User {
  id        String   @id @default(uuid())
  userId    String?  @unique
  role      String?
  password  String?
  studentId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students  Student  @relation(fields: [studentId], references: [id])

  @@map("users")
}

model Student {
  id                                 String                              @id @default(uuid())
  studentId                          String?                             @unique
  firstName                          String
  middleName                         String
  lastName                           String
  email                              String
  contactNo                          String
  profileImage                       String?
  bloodGroup                         String
  gender                             String
  academicSemesterId                 String
  academicFacultyId                  String
  academicDepartmentId               String
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  academicDepartment                 AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty                    AcademicFaculty                     @relation(fields: [academicFacultyId], references: [id])
  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  user                               User?
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  studentEnrollCourses               StudentEnrollCourse[]
  studentEnrolledCourseMarks         StudentEnrolledCourseMark[]
  studentSemesterPayments            StudentSemesterPayment[]
  studentAcademicInfos               StudentAcademicInfo[]

  @@map("students")
}

model Faculty {
  id                          String                       @id @default(uuid())
  firstName                   String
  middleName                  String?
  lastName                    String
  email                       String
  contactNo                   String
  profileImage                String
  bloodGroup                  String
  gender                      String
  designation                 String
  academicFacultyId           String
  academicDepartmentId        String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  facultyId                   String                       @unique
  academicFaculty             AcademicDepartment           @relation(fields: [academicDepartmentId], references: [id])
  academicFaulty              AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  courses                     CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id                          String                       @id @default(uuid())
  roomNumber                  String
  floor                       String
  buildingId                  String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  buildings                   Building                     @relation(fields: [buildingId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id                   String                 @id @default(uuid())
  title                String
  code                 String
  credits              Int                    @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  preRequisite         CourseToPreRequisite[] @relation("CourseToPreRequisite")
  preRequisiteFor      CourseToPreRequisite[] @relation("PreRequisiteToCourse")
  faculties            CourseFaculty[]
  offeredCourses       OfferedCourse[]
  studentEnrollCourses StudentEnrollCourse[]

  @@map("courses")
}

model CourseToPreRequisite {
  courseId     String
  prequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPreRequisite")
  preRequisite Course @relation(fields: [prequisiteId], references: [id], name: "PreRequisiteToCourse")

  @@id([courseId, prequisiteId])
}

model CourseFaculty {
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                                String                              @id @default(uuid())
  startDate                         DateTime
  endDate                           DateTime
  status                            SemesterRegistrationStatus?
  minCredit                         Int                                 @default(0)
  maxCredit                         Int                                 @default(0)
  academicSemesterId                String
  academicSemester                  AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  offeredCourses                    OfferedCourse[]
  offeredCourseSections             OfferedCourseSection[]
  offeredCourseClassSchedules       OfferedCourseClassSchedule[]
  studentSemesterRegistrations      StudentSemesterRegistration[]
  StudentSemesterRegistrationCourse StudentSemesterRegistrationCourse[]

  @@map("semester_registration")
}

model OfferedCourse {
  id                                String                              @id @default(uuid())
  courseId                          String
  course                            Course                              @relation(fields: [courseId], references: [id])
  academicDepartmentId              String
  academicDepartment                AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistrationId            String
  semesterRegistration              SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  offeredCourseSections             OfferedCourseSection[]
  StudentSemesterRegistrationCourse StudentSemesterRegistrationCourse[]
}

model OfferedCourseSection {
  id                                String                              @id @default(uuid())
  title                             String
  maxCapacity                       Int
  currentlyEnrolledStudent          Int                                 @default(0)
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  offeredCourseId                   String
  offeredCourse                     OfferedCourse                       @relation(fields: [offeredCourseId], references: [id])
  semesterRegistrationId            String
  semesterRegistration              SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules       OfferedCourseClassSchedule[]
  StudentSemesterRegistrationCourse StudentSemesterRegistrationCourse[]

  @@map("offered_course_section")
}

model OfferedCourseClassSchedule {
  id        String   @id @default(uuid())
  startTime String
  endTime   String
  dayOfWeek WeekDays @default(SATURDAY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // offeredCourseId        String
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistrationId String
  semesterRegistraton    SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  roomId                 String
  room                   Room                 @relation(fields: [roomId], references: [id])
  facultyId              String
  faculty                Faculty              @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedule")
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirmed            Boolean?             @default(false)
  totalCreditTaken       Int                  @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registration")
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  offeredCourseId        String
  offeredCourse          OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId])
  @@map("student_semesterer_registrations")
}

model StudentEnrollCourse {
  id                         String                      @id @default(uuid())
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  studentId                  String
  student                    Student                     @relation(fields: [studentId], references: [id])
  courseId                   String
  course                     Course                      @relation(fields: [courseId], references: [id])
  academicSemesterId         String
  academicSemester           AcademicSemester            @relation(fields: [academicSemesterId], references: [id])
  grade                      String?
  point                      Float?                      @default(0)
  totalMarks                 Int?                        @default(0)
  status                     StudentErolledCourseStatus  @default(ONGOING)
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]
}

model StudentEnrolledCourseMark {
  id                      String              @id @default(uuid())
  studentId               String
  student                 Student             @relation(fields: [studentId], references: [id])
  studentEnrolledCourseId String
  studentEnrolledCourse   StudentEnrollCourse @relation(fields: [studentEnrolledCourseId], references: [id])
  academicSemesterId      String
  academicSemester        AcademicSemester    @relation(fields: [academicSemesterId], references: [id])
  grade                   String?
  marks                   Int?
  examType                ExamType            @default(MIDTERM)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model StudentSemesterPayment {
  id                   String           @id @default(uuid())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  studentId            String
  student              Student          @relation(fields: [studentId], references: [id])
  academicSemesterId   String
  academicSemester     AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  fullPaymentAmount    Int?             @default(0)
  partialPaymentAmount Int?             @default(0)
  totalPaidAmount      Int?             @default(0)
  totalDueAmount       Int?             @default(0)
  paymentStatus        PaymentStatus    @default(PENDING)
}

model StudentAcademicInfo {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  studentId            String
  student              Student  @relation(fields: [studentId], references: [id])
  totalCompletedCredit Float?   @default(0)
  cgpa                 Float?   @default(0)
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESSDAY
  THURSDAY
  FRIDAY
}

enum StudentErolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}

enum ExamType {
  MIDTERM
  FINAL
}

enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  FULL_PAID
}
